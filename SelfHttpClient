import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HttpEntity;
import org.apache.http.HttpException;
import org.apache.http.HttpRequest;
import org.apache.http.HttpRequestInterceptor;
import org.apache.http.HttpResponse;
import org.apache.http.HttpResponseInterceptor;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.HttpEntityWrapper;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.protocol.HttpContext;

import java.io.IOException;
import java.io.InputStream;
import java.util.zip.GZIPInputStream;

/**
 * Created by wuchunhua on 2015/12/10.
 */
public class SelfHttpClient extends DefaultHttpClient {

    private static ClientConnectionManager TT;

    public SelfHttpClient() {
        super(iA(), new BasicHttpParams());

        addRequestInterceptor(new HttpRequestInterceptor() {
            public void process(HttpRequest paramHttpRequest, HttpContext paramHttpContext)
                    throws HttpException, IOException {
                if (!paramHttpRequest.containsHeader("Accept-Encoding"))
                    paramHttpRequest.addHeader("Accept-Encoding", "gzip");
            }
        });

        addResponseInterceptor(new HttpResponseInterceptor() {
            public void process(HttpResponse httpResponse, HttpContext paramHttpContext)
                    throws HttpException, IOException {
                HttpEntity httpEntity = httpResponse.getEntity();
                if (httpEntity == null) return;
                Header header = httpEntity.getContentEncoding();
                if (header == null) return;
                HeaderElement[] arrheaderElement = header.getElements();
                if (arrheaderElement == null) return;
                int n = 0;
                while (n < arrheaderElement.length) {
                    if (arrheaderElement[n].getName().equalsIgnoreCase("gzip")) {
                        httpResponse.setEntity((HttpEntity) new b(httpResponse.getEntity()));
                        return;
                    }
                    ++n;
                }
                return;
            }
        });
    }

    static final ClientConnectionManager iA() {
        SchemeRegistry localSchemeRegistry = new SchemeRegistry();
        localSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
        localSchemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
        TT = new ThreadSafeClientConnManager(new BasicHttpParams(), localSchemeRegistry);
        return TT;
    }

    private static class b extends HttpEntityWrapper {
        public b(HttpEntity paramHttpEntity) {
            super(paramHttpEntity);
        }

        public InputStream getContent()
                throws IOException, IllegalStateException {
            return new GZIPInputStream(this.wrappedEntity.getContent());
        }

        public long getContentLength() {
            return -1L;
        }
    }
}
